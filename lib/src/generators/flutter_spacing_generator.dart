import 'package:logging/logging.dart';
import 'flutter_color_generator.dart';

class FlutterSpacingGenerator implements CodeGenerator {
  static final _logger = Logger('FlutterSpacingGenerator');

  @override
  String generate(
      Map<String, dynamic> resolvedTokens, Map<String, String> tokenTypes) {
    final buffer = StringBuffer();

    buffer.writeln('/// Auto-generated design tokens for spacing');
    buffer.writeln('/// Do not edit this file manually');
    buffer.writeln('class AppSpacing {');

    final spacingTokens = <String, dynamic>{};

    for (final entry in resolvedTokens.entries) {
      if (entry.key.contains('spacing') ||
          (tokenTypes[entry.key] == 'number' &&
              entry.key.contains('spacing'))) {
        spacingTokens[entry.key] = entry.value;
      }
    }

    if (spacingTokens.isNotEmpty) {
      buffer.writeln();
      buffer.writeln('  // Spacing Values');

      for (final token in spacingTokens.entries) {
        final tokenName = _generateTokenName(token.key);
        final value = _parseSpacingValue(token.value);
        buffer.writeln('  static const double $tokenName = $value;');
      }
    }

    buffer.writeln('}');

    return buffer.toString();
  }

  String _generateTokenName(String path) {
    // Split the path and clean each part
    final parts = path
        .split('.')
        .map((part) => part.replaceAll(RegExp(r'[^a-zA-Z0-9]'), ''))
        .where((part) => part.isNotEmpty)
        .toList();

    if (parts.isEmpty) return 'defaultSpacing';

    // Convert to camelCase: first part lowercase, rest capitalized
    final camelCaseName = parts.first.toLowerCase() +
        parts.skip(1).map((part) => _capitalize(part.toLowerCase())).join('');

    return camelCaseName;
  }

  String _capitalize(String text) {
    if (text.isEmpty) return text;
    return text[0].toUpperCase() + text.substring(1);
  }

  /// Parse spacing value and remove units like px, rem, em etc.
  String _parseSpacingValue(dynamic value) {
    if (value is num) {
      return value.toDouble().toString();
    }

    if (value is String) {
      // Remove common CSS units: px, rem, em, pt, etc.
      String cleaned = value
          .replaceAll(
              RegExp(r'(px|rem|em|pt|dp|sp)$', caseSensitive: false), '')
          .trim();

      // Try to parse as double
      final parsed = double.tryParse(cleaned);
      if (parsed != null) {
        return parsed.toString();
      }
    }

    // Fallback - return as string but log warning
    _logger
        .warning('⚠️  Could not parse spacing value: $value, using fallback');
    return '0.0';
  }
}
